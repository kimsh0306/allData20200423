/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.31
 * Generated at: 2020-05-18 07:38:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.naver;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class captchaSimulation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/naver/../common/jEasyUICommon.jsp", Long.valueOf(1589351735015L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"https://www.jeasyui.com/easyui/themes/default/easyui.css\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"https://www.jeasyui.com/easyui/themes/icon.css\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"https://www.jeasyui.com/easyui/themes/color.css\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"https://www.jeasyui.com/easyui/demo/demo.css\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.9.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://www.jeasyui.com/easyui/jquery.easyui.min.js\"></script>");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar g_key;\r\n");
      out.write("\t//아래에서 키값이 결정된다.\r\n");
      out.write("\tfunction getCaptchaKey(){\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\t method:\"get\"\r\n");
      out.write("\t\t\t //getCaptcaImage.jsp\r\n");
      out.write("\t\t\t,url:\"getCaptchaImage.jsp\"\r\n");
      out.write("\t\t\t,success:function(result){\r\n");
      out.write("\t\t\t\t//alert(\"result:\"+result);\r\n");
      out.write("\t\t\t\tvar imsi = result.split(\"?\");\r\n");
      out.write("\t\t\t\tvar key = imsi[1];\r\n");
      out.write("\t\t\t\tg_key = key.substring(4,20);\r\n");
      out.write("\t\t\t\t//alert(\"g_key:\"+g_key);\r\n");
      out.write("\t\t\t\t$(\"#captchaIMG\").attr(\"src\",result);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\t//getCaptchaKey함수에서 결정된 키가 여기서 필요함. 그렇다면 전역인가|지변인가\r\n");
      out.write("\tfunction captchaAccount(){\r\n");
      out.write("\t\tvar user = $(\"#user\").val();//사용자가 입력한 값\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\t method:\"get\"\r\n");
      out.write("\t\t\t,url:\"captchaAccount.jsp?=user\"+user+\"&key=\"+g_key\r\n");
      out.write("\t\t\t,success:function(data){\r\n");
      out.write("\t\t\t\talert(\"data:\"+data);\r\n");
      out.write("\t\t\t\tvar isOk = JSON.parse(data).result;\r\n");
      out.write("\t\t\t\tif(isOk == true){\r\n");
      out.write("\t\t\t\t\talert(\"일치\");\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\talert(\"불일치\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<!-- 첫페이지에서 보고 싶다. -->\r\n");
      out.write("<body onLoad=\"getCaptchaKey()\">\r\n");
      out.write("<img id=\"captchaIMG\" width=\"200px\" height=\"90px\">\r\n");
      out.write("<button onClick=\"getCaptchaKey()\">새로고침</button>\r\n");
      out.write("<hr>\r\n");
      out.write("<input type=\"text\" name=\"user\" id=\"user\">\r\n");
      out.write("<button onClick=\"captchaAccount()\">판정</button>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
