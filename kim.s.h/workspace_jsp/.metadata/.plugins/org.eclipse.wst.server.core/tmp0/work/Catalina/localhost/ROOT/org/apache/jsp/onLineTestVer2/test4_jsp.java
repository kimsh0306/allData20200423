/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.31
 * Generated at: 2020-05-19 03:00:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.onLineTestVer2;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test4_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/onLineTestVer2/../common/jEasyUICommon.jsp", Long.valueOf(1589351735015L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	String htest3 = request.getParameter("htest3");
	Cookie chtest3 = new Cookie("chtest3", htest3);
	chtest3.setMaxAge(60*60);
	response.addCookie(chtest3);

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>문제4</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"https://www.jeasyui.com/easyui/themes/default/easyui.css\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"https://www.jeasyui.com/easyui/themes/icon.css\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"https://www.jeasyui.com/easyui/themes/color.css\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"https://www.jeasyui.com/easyui/demo/demo.css\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.9.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://www.jeasyui.com/easyui/jquery.easyui.min.js\"></script>");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t//수험자가 선택한 답안을 \r\n");
      out.write("\tfunction test(dap){\r\n");
      out.write("\t\t//alert(\"당신이 선택한 답안은 \"+dap+\" 입니다.\");\r\n");
      out.write("\t\tfor(var i=0;i<document.getElementById(\"f_test1\").cb.length;i++){\r\n");
      out.write("\t\t\tif(dap == i){\r\n");
      out.write("\t\t\t\tdocument.getElementById(\"f_test1\").cb[i].checked = 1;\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tdocument.getElementById(\"f_test1\").cb[i].checked = 0;\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t//이전문제로 이동하기\r\n");
      out.write("\tfunction prev(){\r\n");
      out.write("\t\t//이렇게 이동하는 것은 성격이 주소가 바뀌는 것이기 때문에 redirect이다.\r\n");
      out.write("\t\t//redirect의 특징은 유지가 되지 않는다.주소가 바뀐다.get방식이다.\r\n");
      out.write("\t\tlocation.href=\"test3.jsp\";\r\n");
      out.write("\t}\r\n");
      out.write("\t//다음문제로 넘길때\r\n");
      out.write("\tfunction next(){\r\n");
      out.write("\t\t//수험자가 입력한 답안 저장하기\r\n");
      out.write("\t\tvar temp = 1;\r\n");
      out.write("\t\tfor(var i=0;i<document.getElementById(\"f_test1\").cb.length;i++){\r\n");
      out.write("\t\t\tif(document.getElementById(\"f_test1\").cb[i].checked==1){\r\n");
      out.write("\t\t\t\tdocument.getElementById(\"f_test1\").htest4.value = temp;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\telse{\r\n");
      out.write("\t\t\t\ttemp = temp + 1;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//alert(\"temp:\"+temp);\r\n");
      out.write("\t\tdocument.getElementById(\"f_test1\").submit();\r\n");
      out.write("\t\t//$(\"#f_test1\")\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form id=\"f_test1\" method=\"get\" action=\"send.jsp\">\r\n");
      out.write("<input type=\"hidden\" name=\"htest4\" value=\"0\">\r\n");
      out.write("문제4<br>\r\n");
      out.write("Bean의 Scope에 대한 설명으로 틀린 것은?<br>\r\n");
      out.write("<input type=\"checkbox\" name=\"cb\" onChange=\"test(0)\">\r\n");
      out.write("① page: 기본값이며 그 페이지 내에서만 접근할 수 있다.<br>\r\n");
      out.write("<input type=\"checkbox\" name=\"cb\" onChange=\"test(1)\">\r\n");
      out.write("② request: forward, include에서 사용가능하다.<br>\r\n");
      out.write("<input type=\"checkbox\" name=\"cb\" onChange=\"test(2)\">\r\n");
      out.write("③ session: 사용자가 로그인 하면 시간에 제약없이 무한히 유지된다.<br>\r\n");
      out.write("<input type=\"checkbox\" name=\"cb\" onChange=\"test(3)\">\r\n");
      out.write("④ application: 서버를 재기동하기 전까지는  시간에 제약없이 무한히 유지된다.<br>\r\n");
      out.write("</form>\r\n");
      out.write("<br>\r\n");
      out.write("<button onClick=\"prev()\">이전문제</button>\r\n");
      out.write("<button onClick=\"next()\">다음문제</button>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
